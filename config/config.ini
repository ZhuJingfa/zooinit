[system]
; Current working directory
work.dir = /Users/bruce/project/godev/src/zooinit

[system.boostrap]
service = bootstrap

; Bootstrap etcd cluster service for boot other cluster service. fomat: ip:port:peer
; Bootstrap discovery service recommend to deploy on A known ip machine.
discovery = 192.168.4.220:2379:2380

; Used for internal bootstrap for system, Only one member. After bootstrap cluster is up, internal one will be terminated.
; The same IP with discovery. Ports distinct from discovery in the same machine.
internal = 2377:2378
internal.data.dir = /tmp/internal/etcd/data
internal.wal.dir = /tmp/internal/etcd/wal

; Predefined qurorum for cluster bootstrap
qurorum = 3

; Bootstrap timeout, sec unit
timeout = 300

log.path = %(work.dir)s/log/%(service)s

; Data directory need write permission
; etcd --data-dir /tmp/etcd/data -wal-dir /tmp/etcd/wal
boot.cmd = etcd
boot.data.dir = /tmp/etcd/data
boot.wal.dir = /tmp/etcd/wal


[system.cluster]
service = cluster

; Discover channel
; Available: address, may single point failure
;            dnssrv, this could be a second choise, with dnssrv update api
discover.method = address
; Only on member is up, can fetch all available members.
discover.target = http://192.168.4.220:2379,http://192.168.4.221:2379,http://192.168.4.202:2379
; Child path use service name to distingush
; Booted internal service also reigsted in /zooinit/boot
discover.path.prefix = /zooinit/discovery
;discover.method = dnssrv
;discover.target = _etcd._tcp.discovery.alishui.com

; Log directory
; Will automatically add subcluster service name
log.path = %(work.dir)s/log/%(service)s

; Cluster bootstrap timeout, sec unit
timeout = 300

; Predefined qurorum for cluster service
qurorum = 3

; Ip hint use to found which ip for boot bind, will automatically find intranet ip
ip.hint=192.168.4.1

; cluster service fetch last part of section or from cli args for extend usage zookeepr1, zookeeper-haimi
[system.cluster.zookeeper]
discover.path = %(discover.path.prefix)s/%(service)s


[system.cluster.consul]
; Cluster power backend, because section name may change for multiple cluster.
cluster.backend=consul

discover.path = %(discover.path.prefix)s/%(service)s

; Bootstrap event callback
; OnStart: start an cluster callback, executable script
event.OnStart = "consul"

; App specific configuration, app can fetch through env variables
[system.cluster.consul.config]
dc = test
data-dir = /tmp/consul
; flag, value is empty
server =
rejoin =


[system.cluster.hadoop]



[system.cluster.hbase]

