[system]
; Current working directory
work.dir = /server/zooinit
; Health check interval, default 2 sec, same to zookeeper ticktime.
health.check.interval = 2
; pid file path, avoid multiple instance, need persist
pid.path = /data/zooinit/pid

; available:default, netmask, interface
; default: use discovery or ip.hint to find intranet ip, use real netmask, use with -ip.hint=192.168.4.220, find with the same netmask
; netmask: find ip mask with specific netmask, use with -ip.netmask=255.0.0.0 and -ip.hint=192.168.4.220
; interface: find ip of specific interface, use with -ip.interface=eth0
; with no -ip.local not set, if set, use -ip.local
#ip.local =
ip.method = default
; Ip hint use to found which ip for boot bind, will automatically find intranet ip
ip.hint = 192.168.4.1
#ip.netmask =
#ip.interface =


[system.boostrap]
service = bootstrap

; Bootstrap etcd cluster service for boot other cluster service. fomat: ip:port:peer
; Bootstrap discovery service recommend to deploy on A known ip machine.
discovery = 192.168.4.220:2379:2380

; Used for internal bootstrap for system, Only one member. After bootstrap cluster is up, internal one will be terminated.
; The same IP with discovery. Ports distinct from discovery in the same machine.
internal = 2377:2378
internal.data.dir = /tmp/internal/etcd/data
internal.wal.dir = /tmp/internal/etcd/wal

; Predefined qurorum for cluster bootstrap
qurorum = 3

; Bootstrap timeout, sec unit
timeout = 300

; Configuration of runtime log channel: file, write to file; stdout, write to stdout; multi, write both.
log.channel = multi
log.path = %(work.dir)s/log/%(service)s

; Data directory need write permission
; etcd --data-dir /tmp/etcd/data -wal-dir /tmp/etcd/wal
boot.cmd = etcd
boot.data.dir = /data/etcd/data
boot.wal.dir = /data/etcd/wal
; etcd -snapshot-count=10000 https://coreos.com/etcd/docs/latest/tuning.html
boot.snap.count = 10000


[system.cluster]
service = cluster

; Discover channel
; Available: address, may single point failure
;            dnssrv, this could be a second choise, with dnssrv update api
discovery.method = address
; Only on member is up, can fetch all available members.
discovery.target = http://192.168.4.220:2379,http://192.168.4.221:2379,http://192.168.4.202:2379
; Child path use service name to distingush
; Booted internal service also reigsted in /zooinit/boot
discovery.path.prefix = /zooinit/discovery
;discovery.method = dnssrv
;discovery.target = _etcd._tcp.discovery.alishui.com

; Log directory
; Configuration of runtime log channel: file, write to file; stdout, write to stdout; multi, write both.
log.channel = multi
; Will automatically add subcluster service name
log.path = /data/zooinit/log/%(service)s

; Cluster bootstrap timeout, sec unit
timeout = 300

; Predefined qurorum for cluster service
qurorum = 3


[system.cluster.etcd]
discovery.path = %(discovery.path.prefix)s/%(service)s

; Bootstrap event callback

; 事件回调列表
; 回传环境参数列表, IF has value, either empty:
;   ZOOINIT_CLUSTER_BACKEND 背后服务
;   ZOOINIT_CLUSTER_SERVICE 服务名称
;   ZOOINIT_CLUSTER_EVENT 启动事件
;   ZOOINIT_SERVER_IP_LIST 服务器ip列表
;   ZOOINIT_LOCAL_IP 本地ip
;   ZOOINIT_MASTER_IP 主机ip
;   ZOOINIT_QURORUM 候选人数量
;
; 当前主机注册到发现中心之前执行
;EVENT_ON_PRE_REGIST = "OnPreRegist"
; 节点注册成功后执行
;EVENT_ON_POST_REGIST = "OnPostRegist"
; 到达法定数量候选人后执行
;EVENT_ON_REACH_QURORUM_NUM = "OnReachQurorumNum"
; 启动集群member之前执行
;EVENT_ON_PRE_START = "OnPreStart"
; required: 执行cluster-startup钩子脚本
EVENT_ON_START = "OnStart"
; required: 检测确认集群已经启动
; Check cluster if up if return exit code is normal
EVENT_ON_POST_START = "OnPostStart"
; 集群成功启动后调用
;EVENT_ON_CLUSTER_BOOTED = "OnClusterBooted"
; required: 检查集群状态后执行
EVENT_ON_HEALTH_CHECK = "OnHealthCheck"


